#!/bin/bash\n\nmkdir -p src/main/java/com/example/creditmaintenance\nmkdir -p src/main/java/com/example/creditmaintenance/controller\nmkdir -p src/main/java/com/example/creditmaintenance/model\nmkdir -p src/main/java/com/example/creditmaintenance/repository\nmkdir -p src/main/java/com/example/creditmaintenance/service\nmkdir -p src/main/java/com/example/creditmaintenance/config\nmkdir -p src/main/java/com/example/creditmaintenance/exception\nmkdir -p src/main/java/com/example/creditmaintenance/util\nmkdir -p src/test/java/com/example/creditmaintenance\n\ncat << 'EOF' > pom.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example</groupId>\n    <artifactId>credit-maintenance</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>credit-maintenance</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <java.version>21</java.version>\n    </properties>\n\n   <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.1.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-batch</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jms</artifactId>\n        </dependency>\n        <dependency>\n                <groupId>org.springframework.kafka</groupId>\n                <artifactId>spring-kafka</artifactId>\n           </dependency>\n        <dependency>\n            <groupId>com.oracle.database.jdbc</groupId>\n            <artifactId>ojdbc8</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.batch</groupId>\n            <artifactId>spring-batch-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\nEOF\n\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/model/CreditMaintenanceRecord.java\npackage com.example.creditmaintenance.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\n// Represents a single record from input file with original data.\n@Data\n@NoArgsConstructor\n@Entity\npublic class CreditMaintenanceRecord {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String accountNumber;\n    private String name;\n    private String address;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String creditLimit;\n    private String creditScore;\n\n    //Additional Fields for processing.\n    private String status; // PROCESSED, ERROR, RETRY\n    private String errorReason; //Holds the reason why a record is in error state\n    private LocalDateTime processDate;\n}\nEOF\n\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/model/CreditMaintenanceCloudRecord.java\npackage com.example.creditmaintenance.model;\n\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\npublic class CreditMaintenanceCloudRecord {\n     @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String accountNumber; //Account Number *key\n    private String name;       //Name\n    private String address;    //Address\n\n    private String city; //City\n    private String status; //New field\n\n    private LocalDateTime processDate; // New Field\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/repository/CreditMaintenanceCloudRecordRepository.java\npackage com.example.creditmaintenance.repository;\n\nimport com.example.creditmaintenance.model.CreditMaintenanceCloudRecord;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CreditMaintenanceCloudRecordRepository extends JpaRepository<CreditMaintenanceCloudRecord, Long> {\n\n    CreditMaintenanceCloudRecord findByAccountNumber(String accountNumber);\n}\nEOF\n\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/repository/CreditMaintenanceRecordRepository.java\npackage com.example.creditmaintenance.repository;\n\nimport com.example.creditmaintenance.model.CreditMaintenanceRecord;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CreditMaintenanceRecordRepository extends JpaRepository<CreditMaintenanceRecord, Long> {\n\n    CreditMaintenanceRecord findByAccountNumber(String accountNumber);\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/service/CreditMaintenanceService.java\npackage com.example.creditmaintenance.service;\n\nimport com.example.creditmaintenance.model.CreditMaintenanceCloudRecord;\nimport com.example.creditmaintenance.model.CreditMaintenanceRecord;\nimport com.example.creditmaintenance.repository.CreditMaintenanceCloudRecordRepository;\nimport com.example.creditmaintenance.repository.CreditMaintenanceRecordRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.jms.core.JmsTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class CreditMaintenanceService {\n\n    private final CreditMaintenanceRecordRepository recordRepository;\n    private final CreditMaintenanceCloudRecordRepository cloudRecordRepository;\n    private final JmsTemplate jmsTemplate;\n\n\n    @Value(\"${file.input.path}\")\n    private String inputFilePath;\n\n    @Value(\"${file.error.path}\")\n    private String errorFilePath;\n\n     @Value(\"${file.reprocess.path}\")\n    private String reprocessFilePath;\n\n    @Value(\"${jms.queue.error}\")\n    private String errorQueue;\n\n   @Value(\"${jms.queue.cloud}\")\n    private String cloudQueue;\n\n    @Value(\"${app.retryCount:3}\") // Default retry count\n    private int maxRetryCount;\n\n\n    // Method to read and process records from file. Simulates the main process.\n     public void processCreditMaintenanceFile(String filePath) {\n        log.info(\"Starting file processing: {}\", filePath);\n        try {\n            List<CreditMaintenanceRecord> records = Files.lines(Paths.get(filePath))\n                    .skip(1) // Skip header\n          
          .map(this::mapToRecord)\n                    .collect(Collectors.toList());\n            log.info(\"{} records found in the file\",records.size());\n\n          processRecords(records);\n\n        } catch (IOException e) {\n            log.error(\"Error reading file: {}\", filePath, e);\n             //Send a message to Exception Queue\n        }\n         log.info(\"Completed file processing: {}\", filePath);\n    }\n\n    private void processRecords(List<CreditMaintenanceRecord> records){\n         for (CreditMaintenanceRecord record : records) {\n            try {\n                if (isValidRecord(record)) {\n              
      processValidRecord(record);\n                } else {\n                    handleInvalidRecord(record);\n                }\n            } catch (Exception e) {\n                 log.error(\"Exception in processing record : {}\",record.getAccountNumber(),e);\n                 record.setStatus(\"ERROR\");\n                 record.setProcessDate(LocalDateTime.now());\n                 record.setErrorReason(e.getMessage());\n                 recordRepository.save(record);\n\n                 // Send to error queue\n                 jmsTemplate.convertAndSend(errorQueue, record);\n                  writeToReprocessFile(record,reprocessFilePath);\n            }\n        }\n    }\n\n\n    @Transactional\n    public void processValidRecord(CreditMaintenanceRecord record) {\n            log.info(\"Processing valid record for account: {}\", record.getAccountNumber());\n            // 1. Update/Insert into  CreditMaintenanceRecord table\n            CreditMaintenanceRecord existingRecord = recordRepository.findByAccountNumber(record.getAccountNumber());\n         
   if (existingRecord != null) {\n                // Update existing record\n                existingRecord.setName(record.getName());\n                existingRecord.setAddress(record.getAddress());\n              
  existingRecord.setCity(record.getCity());\n                existingRecord.setState(record.getState());\n                existingRecord.setZipCode(record.getZipCode());\n                existingRecord.setCreditLimit(record.getCreditLimit());\n                existingRecord.setCreditScore(record.getCreditScore());\n                existingRecord.setProcessDate(LocalDateTime.now()); //Update only processDate.\n                recordRepository.save(existingRecord);\n                 log.info(\"Existing Record updated {}\",existingRecord.getAccountNumber());\n            } else {\n                // Insert new record\n                record.setStatus(\"PROCESSED\");\n                record.setProcessDate(LocalDateTime.now());\n                recordRepository.save(record);\n                 log.info(\"New Record Added {}\",record.getAccountNumber());\n            }\n\n             // 2.  Insert/Update into Cloud table\n            CreditMaintenanceCloudRecord cloudRecord = cloudRecordRepository.findByAccountNumber(record.getAccountNumber());\n            if (cloudRecord != null) {\n                //Update\n                cloudRecord.setName(record.getName());\n                cloudRecord.setAddress(record.getAddress());\n                cloudRecord.setCity(record.getCity());\n                cloudRecord.setStatus(\"UPDATED\");\n                cloudRecord.setProcessDate(LocalDateTime.now());\n                cloudRecordRepository.save(cloudRecord);\n                 log.info(\"Cloud Record updated {}\",record.getAccountNumber());\n\n            }else{\n                //Insert into cloud table.\n                cloudRecord = new CreditMaintenanceCloudRecord();\n                cloudRecord.setAccountNumber(record.getAccountNumber());\n                cloudRecord.setName(record.getName());\n                cloudRecord.setAddress(record.getAddress());\n                cloudRecord.setCity(record.getCity());\n                cloudRecord.setStatus(\"NEW\");\n                 cloudRecord.setProcessDate(LocalDateTime.now());\n                cloudRecordRepository.save(cloudRecord);\n                 log.info(\"Cloud Record Added {}\",record.getAccountNumber());\n            }\n             // 3. Publish to Cloud Queue (JMS)\n             jmsTemplate.convertAndSend(cloudQueue, cloudRecord); // Assuming we send the cloud record.\n              log.info(\"Message sent to  Cloud Queue {}\",record.getAccountNumber());\n    }\n\n\n\n    private void handleInvalidRecord(CreditMaintenanceRecord record) throws IOException {\n        log.warn(\"Invalid record found: {}\", record.getAccountNumber());\n        record.setStatus(\"ERROR\");\n          record.setProcessDate(LocalDateTime.now());\n        recordRepository.save(record);\n        // Write to error file\n        writeToErrorFile(record, errorFilePath);\n    }\n\n    private boolean isValidRecord(CreditMaintenanceRecord record) {\n         // Basic validation, can be extended\n        if (record.getAccountNumber() == null || record.getAccountNumber().isEmpty()) {\n            record.setErrorReason(\"AccountNumber cannot be null or empty.\");\n            return false;\n        }\n        if (record.getName() == null || record.getName().isEmpty()) {\n               record.setErrorReason(\"Name cannot be null or empty.\");\n            return false;\n        }\n          if (record.getAddress() == null || record.getAddress().isEmpty()) {\n                 record.setErrorReason(\"Address cannot be null or empty.\");\n            return false;\n        }\n           if (record.getCity() == null || record.getCity().isEmpty()) {\n                 record.setErrorReason(\"City cannot be null or empty.\");\n            return false;\n        }\n        // Add additional validations\n        return true;\n    }\n\n\n    private CreditMaintenanceRecord mapToRecord(String line) {\n        // Assuming comma-separated values. Adapt based on the actual file format (fixed-width, delimited)\n        String[] fields = line.split(\",\");\n        CreditMaintenanceRecord record = new CreditMaintenanceRecord();\n\n        //Check if there are enough fields, handle cases with incomplete records\n         if (fields.length > 0) {\n            record.setAccountNumber(fields[0].trim());\n        }\n        if (fields.length > 1) {\n            record.setName(fields[1].trim());\n        }\n        if (fields.length > 2) {\n            record.setAddress(fields[2].trim());\n        }\n          if (fields.length > 3) {\n            record.setCity(fields[3].trim());\n        }\n        if (fields.length > 4) {\n             record.setState(fields[4].trim());\n        }\n          if (fields.length > 5) {\n             record.setZipCode(fields[5].trim());\n        }\n         if (fields.length > 6) {\n             record.setCreditLimit(fields[6].trim());\n        }\n        if (fields.length > 7) {\n             record.setCreditScore(fields[7].trim());\n        }\n        return record;\n    }\n\n    private synchronized void writeToErrorFile(CreditMaintenanceRecord record, String filePath) throws IOException {\n        //TODO append timestamp\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {\n            writer.write(String.format(\"%s,%s,%s,%s\\n\", record.getAccountNumber(), record.getName(), record.getStatus(),record.getErrorReason()));\n        }\n    }\n\n     private synchronized void writeToReprocessFile(CreditMaintenanceRecord record, String filePath)  {\n        //TODO append timestamp\n          try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {\n            writer.write(String.format(\"%s,%s,%s,%s\\n\", record.getAccountNumber(), record.getName(), record.getStatus(),record.getErrorReason()));\n        }catch (IOException e) {\n            log.error(\"Error writing reprocess file\",e);\n        }\n    }\n\n     // Method to simulate receiving JMS messages and reprocessing\n    public void reprocessCreditMaintenanceRecord(String accountNumber) {\n        log.info(\"Reprocessing record for account: {}\", accountNumber);\n        CreditMaintenanceRecord record = recordRepository.findByAccountNumber(accountNumber);\n        if (record != null && \"ERROR\".equals(record.getStatus())) {\n            try {\n                if (isValidRecord(record)) {\n                    processValidRecord(record);\n                     log.info(\"Reprocessed record for account: {}\", accountNumber);\n                } else {\n                    handleInvalidRecord(record);\n                     log.info(\"Reprocessed record failed for account: {}\", accountNumber);\n                }\n            } catch (Exception e) {\n                 log.error(\"Exception reprocessing record for account: {}\", accountNumber,e);\n                 //Send message to error queue\n               
  jmsTemplate.convertAndSend(errorQueue, record);\n            }\n        } else {\n            log.warn(\"Record not found or not in ERROR status for reprocessing: {}\", accountNumber);\n        }\n    }\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/config/BatchConfig.java\npackage com.example.creditmaintenance.config;\n\nimport com.example.creditmaintenance.model.CreditMaintenanceRecord;\nimport com.example.creditmaintenance.service.CreditMaintenanceService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.Step;\nimport org.springframework.batch.core.job.builder.JobBuilder;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.batch.core.launch.support.TaskExecutorJobLauncher;\nimport org.springframework.batch.core.repository.JobRepository;\nimport org.springframework.batch.core.step.builder.StepBuilder;\nimport org.springframework.batch.item.ItemProcessor;\nimport org.springframework.batch.item.ItemReader;\nimport org.springframework.batch.item.ItemWriter;\nimport org.springframework.batch.item.file.FlatFileItemReader;\nimport org.springframework.batch.item.file.LineMapper;\nimport org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;\nimport org.springframework.batch.item.file.mapping.DefaultLineMapper;\nimport org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.task.SimpleAsyncTaskExecutor;\nimport org.springframework.core.task.TaskExecutor;\nimport org.springframework.jms.annotation.JmsListener;\nimport org.springframework.transaction.PlatformTransactionManager;\n\n@Configuration\n@RequiredArgsConstructor\n@Slf4j\npublic class BatchConfig {\n\n    private final CreditMaintenanceService creditMaintenanceService;\n\n    @Value(\"${file.input.path}\")\n    private String inputFilePath;\n\n    @Value(\"${jms.queue.retry}\")\n    private String retryQueue;\n    @Bean\n    public FlatFileItemReader<CreditMaintenanceRecord> fileReader() {\n        FlatFileItemReader<CreditMaintenanceRecord> reader = new FlatFileItemReader<>();\n        reader.setResource(new FileSystemResource(inputFilePath));\n        reader.setLinesToSkip(1); // Skip header\n        reader.setLineMapper(lineMapper());\n        return reader;\n    }\n    @Bean\n    public LineMapper<CreditMaintenanceRecord> lineMapper() {\n        DefaultLineMapper<CreditMaintenanceRecord> lineMapper = new DefaultLineMapper<>();\n        DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();\n        lineTokenizer.setDelimiter(\",\"); // Or whatever your delimiter is\n        lineTokenizer.setNames(\"accountNumber\", \"name\", \"address\", \"city\",\"state\",\"zipCode\",\"creditLimit\",\"creditScore\"); // Column names\n\n        BeanWrapperFieldSetMapper<CreditMaintenanceRecord> fieldSetMapper = new BeanWrapperFieldSetMapper<>();\n        fieldSetMapper.setTargetType(CreditMaintenanceRecord.class);\n\n        lineMapper.setLineTokenizer(lineTokenizer);\n        lineMapper.setFieldSetMapper(fieldSetMapper);\n        return lineMapper;\n    }\n\n\n   @Bean\n    public ItemProcessor<CreditMaintenanceRecord, CreditMaintenanceRecord> processor() {\n        // Return a lambda or a class that implements ItemProcessor.\n        return record -> {\n             if (creditMaintenanceService.isValidRecord(record)) {\n                  return record; // Process if valid\n              }else{\n                 return null; //Skip\n              }\n        };\n    }\n\n     @Bean\n    public ItemWriter<CreditMaintenanceRecord> databaseWriter() {\n        // This is a simple writer.  You'd likely use a JpaItemWriter or similar.\n        return items -> {\n           for(CreditMaintenanceRecord item: items){\n                creditMaintenanceService.processValidRecord(item);\n           }\n        };\n    }\n\n\n    @Bean\n    public Step fileProcessingStep(JobRepository jobRepository, PlatformTransactionManager transactionManager) {\n        return new StepBuilder(\"fileProcessingStep\", jobRepository)\n                .<CreditMaintenanceRecord, CreditMaintenanceRecord>chunk(10, transactionManager) // Process 10 records at a time\n                .reader(fileReader())\n                .processor(processor())\n                .writer(databaseWriter())\n                .build();\n    }\n\n     @Bean\n    public Step jmsTriggerStep() {\n       return new StepBuilder(\"jmsTriggerStep\", jobRepository())\n                .<String, String>chunk(10, transactionManager())\n                 // Reader for JMS Queue\n                .reader(jmsQueueReader())\n                .writer(jmsProcessingWriter())\n                .build();\n    }\n\n    @Bean\n    public ItemReader<String> jmsQueueReader() {\n        return new JmsItemReader(jmsTemplate(), retryQueue); // Read JMS Queue with Account Number\n\n    }\n\n    //Dummy\n    private JmsTemplate jmsTemplate(){\n        return null;\n    }\n\n\n\n      @Bean\n    public ItemWriter<String> jmsProcessingWriter(){\n         return items -> {\n           for(String item: items){\n                creditMaintenanceService.reprocessCreditMaintenanceRecord(item);\n           }\n        };\n      }\n\n   \n\n\n    @Bean\n    public Job creditMaintenanceJob(JobRepository jobRepository, PlatformTransactionManager transactionManager) {\n        return new JobBuilder(\"creditMaintenanceJob\", jobRepository)\n                .start(fileProcessingStep(jobRepository, transactionManager))\n               // .next(jmsTriggerStep())\n                .build();\n    }\n\n     @Bean(name = \"jobLauncherTaskExecutor\")\n        public JobLauncher jobLauncherTaskExecutor(JobRepository jobRepository) throws Exception {\n            TaskExecutorJobLauncher jobLauncher = new TaskExecutorJobLauncher();\n            jobLauncher.setJobRepository(jobRepository);\n            jobLauncher.setTaskExecutor(new SimpleAsyncTaskExecutor());\n            jobLauncher.afterPropertiesSet();\n            return jobLauncher;\n        }\n\n\n  //JMS Listner for retry\n    @JmsListener(destination = \"${jms.queue.retry}\")\n    public void receiveRetryMessage(String accountNumber) {\n        log.info(\"Received message from retry queue for account: {}\", accountNumber);\n         creditMaintenanceService.reprocessCreditMaintenanceRecord(accountNumber);\n    }\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/config/JmsConfig.java\npackage com.example.creditmaintenance.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.jms.annotation.EnableJms;\nimport org.springframework.jms.config.DefaultJmsListenerContainerFactory;\nimport org.springframework.jms.support.converter.MappingJackson2MessageConverter;\nimport org.springframework.jms.support.converter.MessageConverter;\nimport org.springframework.jms.support.converter.MessageType;\n\nimport javax.jms.ConnectionFactory;\n\n@Configuration\n@EnableJms\npublic class JmsConfig {\n\n    @Bean\n    public DefaultJmsListenerContainerFactory jmsListenerContainerFactory(ConnectionFactory connectionFactory) {\n        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\n        factory.setConnectionFactory(connectionFactory);\n        factory.setMessageConverter(jacksonJmsMessageConverter());\n         factory.setConcurrency(\"3-10\"); // Set concurrency as needed\n        return factory;\n    }\n\n      @Bean // Serialize message content to json using TextMessage\n    public MessageConverter jacksonJmsMessageConverter() {\n        MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();\n        converter.setTargetType(MessageType.TEXT);\n        converter.setTypeIdPropertyName(\"_type\");\n        return converter;\n    }\n\n\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/exception/GlobalExceptionHandler.java\npackage com.example.creditmaintenance.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity<String> handleException(Exception e) {\n        // Log the exception\n        return new ResponseEntity<>(\"An error occurred: \" + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n\n    @ExceptionHandler(InvalidRecordException.class)\n       public ResponseEntity<String> handleInvalidRecordException(InvalidRecordException e) {\n           // Log the exception if required\n           return new ResponseEntity<>(\"Invalid Record: \"+e.getMessage(),HttpStatus.BAD_REQUEST);\n       }\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/exception/InvalidRecordException.java\npackage com.example.creditmaintenance.exception;\n\npublic class InvalidRecordException extends RuntimeException{\n     public InvalidRecordException(String message){\n         super(message);\n     }\n     public InvalidRecordException(String message, Throwable cause){\n         super(message,cause);\n     }\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/util/CreditMaintenanceUtils.java\npackage com.example.creditmaintenance.util;\n\npublic class CreditMaintenanceUtils {\n //Static utility methods.\n}\nEOF\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/controller/JobLauncherController.java\npackage com.example.creditmaintenance.controller;\n\nimport com.example.creditmaintenance.service.CreditMaintenanceService;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.JobParameters;\nimport org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.core.launch.JobLauncher;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\n\n@RestController\n@RequestMapping(\"/api/creditmaintenance\")\n@RequiredArgsConstructor\n@Slf4j\npublic class JobLauncherController {\n\n    @Qualifier(\"jobLauncherTaskExecutor\")\n    private final JobLauncher jobLauncher;\n    private final Job creditMaintenanceJob; // Your main job\n\n    private  final CreditMaintenanceService creditMaintenanceService;\n\n     @Value(\"${file.input.path}\")\n    private String inputFilePath;\n\n\n    @GetMapping(\"/start\")\n    public ResponseEntity<String> startJob() {\n        try {\n              //Trigger using file approach.\n              creditMaintenanceService.processCreditMaintenanceFile(inputFilePath);\n\n           /* //Trigger using Spring Batch job\n            JobParameters jobParameters = new JobParametersBuilder()\n           
         .addString(\"JobID\", System.currentTimeMillis()+\"_\"+ LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))\n                    .toJobParameters();\n            jobLauncher.run(creditMaintenanceJob, jobParameters); // Run the job\n            */\n\n            return ResponseEntity.ok(\"Job started successfully.\");\n        } catch (Exception e) {\n             log.error(\"Job Failed \",e);\n         
   return ResponseEntity.internalServerError().body(\"Job failed to start: \" + e.getMessage());\n        }\n    }\n}\nEOF\n\n\n\ncat << 'EOF' > src/main/java/com/example/creditmaintenance/CreditMaintenanceApplication.java\npackage com.example.creditmaintenance;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n\n@SpringBootApplication\npublic class CreditMaintenanceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CreditMaintenanceApplication.class, args);\n    }\n\n}\nEOF\n\n\ncat << 'EOF' > src/main/resources/application.properties\n# Spring Boot configuration\nspring.application.name=credit-maintenance\n\n# Database configuration (Oracle)\nspring.datasource.url=jdbc:oracle:thin:@mccdev01db.federated.fds:1511/MCCDEV01\nspring.datasource.username=CCI1CBEM\nspring.datasource.password=db2inst1\nspring.datasource.driver-class-name=oracle.jdbc.OracleDriver\n\n# Cloud Database\nspring.datasource.cloud.url=jdbc:oracle:thin:@MDMDEV01DB.federated.fds:1511/MDMDEV01\nspring.datasource.cloud.username=MDI2ODSM\nspring.datasource.cloud.password=db2inst1\n\n\n#JPA\nspring.jpa.hibernate.ddl-auto=create-drop\nspring.jpa.show-sql=true\nspring.jpa.properties.hibernate.format_sql=true\n\n# JMS configuration (replace with your actual configuration)\nspring.jms.template.default-destination=M.MKT.CC2.CUSTOMER.MTNC.ACCOUNT.MAINTRIGGER\n\n# ActiveMQ configuration (example, adjust as needed)\nspring.activemq.broker-url=vm://localhost?broker.persistent=false\n#spring.activemq.user=\n#spring.activemq.password=\n\n\n# Custom properties\nfile.input.path=./data/input.txt\nfile.error.path=./data/error.txt\nfile.reprocess.path=./data/reprocess.txt\njms.queue.error=M.MKT.CC2.CUSTOMER.CLOUD.MTNC.ACCOUNT.ERROR\njms.queue.retry=M.MKT.CC2.CUSTOMER.MTNC.ACCOUNT.REPROCESSTRIGGER\njms.queue.cloud=M.MKT.CC2.CUSTOMER.CLOUD.MTNC.ACCOUNT\n\n#Logging\nlogging.level.root=INFO\nlogging.level.com.example.creditmaintenance=DEBUG\n\n\n# Create dummy input file\nmkdir -p data\necho \"accountNumber,name,address,city,state,zipCode,creditLimit,creditScore\" > data/input.txt\necho \"12345,John Doe,123 Main St,SomeCity,CA,90210,10000,750\" >> data/input.txt\necho \"67890,Jane Smith,456 Oak Ave,AnotherCity,NY,10001,5000,680\" >> data/input.txt\necho \",InvalidName,789 Pine Ln,SomeCity,CA,90210,10000,750\" >> data/input.txt\n\n# Maven build and run\nmvn clean install spring-boot:run\n\n\n